# Note that this script can accept some limited command-line arguments, run
# `julia build_tarballs.jl --help` to see a usage message.
using BinaryBuilder

name = "Librsvg"
version = v"2.42.2"

# Collection of sources required to build librsvg
sources = [
    "https://download.gnome.org/sources/librsvg/$(version.major).$(version.minor)/librsvg-$(version).tar.xz" =>
    "0c550a0bffef768a436286116c03d9f6cd3f97f5021c13e7f093b550fac12562"
]

# Bash recipe for building across all platforms
script = raw"""
cd $WORKSPACE/srcdir/librsvg-*/

FLAGS=()
if [[ "${target}" == *-apple-* ]]; then
    # We purposefully use an old binutils, so we must disable -Bsymbolic
    FLAGS+=(--disable-Bsymbolic)
fi

# cssparser must be upgraded as it doesn't build properly anymore
sed -i.bak -e 's&cssparser = "0.23"&cssparser = "0.25"&' rust/Cargo.toml
(cd rust && cargo vendor)

./configure --prefix=$prefix --host=$target \
    --disable-static \
    --enable-pixbuf-loader \
    --disable-introspection \
    --disable-gtk-doc-html \
    --enable-shared \
    "${FLAGS[@]}"

# `make` expects a `libfribidi.la`, so let's create one
cat >${prefix}/lib/libfribidi.la <<EOF
# libfribidi.la - a libtool library file
# Generated by fakelibtool 0.0.1
dlname='libfribidi.so.0'
library_names='libfribidi.so.0.4.0 libfribidi.so.0 libfribidi.so'
installed=yes
libdir='/workspace/destdir/lib'
EOF

make RUST_LIB="$(pwd)/rust/target/${rust_target}/release/librsvg_internals.a" -j${nproc}
make RUST_LIB="$(pwd)/rust/target/${rust_target}/release/librsvg_internals.a" install

# Cleanup the fake `libfribidi.la` file
rm -f ${prefix}/lib/libfribidi.la
"""

# These are the platforms we will build for by default, unless further
# platforms are passed in on the command line
platforms = supported_platforms()

# The products that we will ensure are always built
products = [
    LibraryProduct("librsvg-2", :librsvg),
    LibraryProduct("libpixbufloader-svg", :libpixbufloader_svg, ["lib/gdk-pixbuf-2.0/2.10.0/loaders"]),
    ExecutableProduct("rsvg-convert", :rsvg_convert),

    # This doesn't seem to be getting compiled, for some reason.  /shrug
    #ExecutableProduct("rsvg-view-3", :rsvg_view),
]

# Dependencies that must be installed before this package can be built
dependencies = [
    "gdk_pixbuf_jll",
    "Pango_jll",
    "Libcroco_jll",
]

# Build the tarballs, and possibly a `build.jl` as well.
build_tarballs(ARGS, name, version, sources, script, platforms, products, dependencies; compilers=[:c, :rust])
